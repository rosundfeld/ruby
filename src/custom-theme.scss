
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

$ruby-primary: mat.define-palette((
  50: #e3f2fd,
  100: #bbdefb,
  200: #90caf9,
  300: #64b5f6,
  400: #42a5f5,
  500: #2196f3,
  600: #1e88e5,
  700: #1976d2,
  800: #1565c0,
  900: #0d47a1,
  A100: #82b1ff,
  A200: #448aff,
  A400: #2979ff,
  A700: #2962ff,
  contrast: (
    50: mat.define-contrast-color(mat.$black-contrast),
    100: mat.define-contrast-color(mat.$black-contrast),
    200: mat.define-contrast-color(mat.$black-contrast),
    300: mat.define-contrast-color(mat.$black-contrast),
    400: mat.define-contrast-color(mat.$black-contrast),
    500: mat.define-contrast-color(mat.$white-contrast),
    600: mat.define-contrast-color(mat.$white-contrast),
    700: mat.define-contrast-color(mat.$white-contrast),
    800: mat.define-contrast-color(mat.$white-contrast),
    900: mat.define-contrast-color(mat.$white-contrast),
    A100: mat.define-contrast-color(mat.$black-contrast),
    A200: mat.define-contrast-color(mat.$white-contrast),
    A400: mat.define-contrast-color(mat.$white-contrast),
    A700: mat.define-contrast-color(mat.$white-contrast),
  ),
));

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$ruby-primary: mat.define-palette(mat.$red-palette);
$ruby-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$ruby-warn: mat.define-palette(mat.$amber-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$ruby-theme: mat.define-light-theme((
  color: (
    primary: $ruby-primary,
    accent: $ruby-accent,
    warn: $ruby-warn,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($ruby-theme);


html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }
